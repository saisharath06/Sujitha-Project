pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Docker image tag')
        string(name: 'CONTAINER_NAME', defaultValue: 'cap-sujitha-container', description: 'Docker container name')
        string(name: 'HOST_PORT', defaultValue: '3000', description: 'Host port to expose the container')
    }

    environment {
        DOCKER_IMAGE = "cap-sujitha:${params.IMAGE_TAG}"
        DOCKER_HUB_REPO = "sharath0608/cap-ecommerce"
        ECR_REPO = "636768524979.dkr.ecr.us-east-1.amazonaws.com/sharath-capstone"
        AWS_REGION = "us-east-1"
        CONTAINER_PORT = "3000"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'master', url: 'https://github.com/saisharath06/Sujitha-Project.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker_credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        sh """
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker tag ${DOCKER_IMAGE} ${DOCKER_HUB_REPO}:${params.IMAGE_TAG}
                            docker push ${DOCKER_HUB_REPO}:${params.IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Push to AWS ECR') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials']]) {
                    script {
                        sh """
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                            docker tag ${DOCKER_IMAGE} ${ECR_REPO}:${params.IMAGE_TAG}
                            docker push ${ECR_REPO}:${params.IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    sh """
                        docker run -d --name ${params.CONTAINER_NAME} -p ${params.HOST_PORT}:${CONTAINER_PORT} ${DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials']]) {
                    script {
                        sh """
                            aws eks update-kubeconfig --name Sharath-cluster4 --region ${AWS_REGION}
                            kubectl apply -f deployment.yml
                            kubectl apply -f mongo-deployment.yml
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Check logs for details."
        }
        always {
            echo "Cleaning up..."
        }
    }
}